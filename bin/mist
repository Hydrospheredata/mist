#!/usr/bin/env bash

export MIST_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" && pwd )"

read -d '' help <<- EOF
MIST â€“ is a thin service on top of Spark which makes it possible to execute Scala & Python Spark Jobs from application layers and get synchronous, asynchronous, and reactive results as well as provide an API to external clients.

Usage:
   Start Mist daemon:
  ./mist start master
      --config <path>                 path to Mist config
      --jar <path>                    path to Mist compiled jar
      --runner <runner>               "local" or "docker" start workers locally or in separate dockers accordingly
      --docker-host <host>            docker daemon host (only for docker runner)
      --docker-port <docker>          docker daemon port (only for docker runner)
      --java-args <args>              arguments for java i.e. "-Xmx2048m -Xms256m -Dsettings.value=1"

  Run single Mist job:
  ./mist start job
      --config <path>                 path to Mist config
      --jar <path>                    path to Mist compiled jar
      --path <path>                   path to Mist Job
      --classname <class name>        Mist job class name
      --external-id <id>              some id for external separation of jobs
      --namespace <namespace>         Mist namespace
      --route <route>                 Mist route (see https://github.com/Hydrospheredata/mist/blob/master/docs/routes.md)
      --parameters <json>             parameters for Mist job in JSON format

  Manage job and workers:
  ./mist cli
             list
                  workers                  list all started workers
                  jobs                     list all started jobs
             kill
                  all                      kill all workers
                  worker <namespace>       kill named worker
                  job <external id|UID>    kill named job

  Stop Mist daemon:
  ./mist stop

Report bugs to: https://github.com/hydrospheredata/mist/issues
Up home page: http://hydrosphere.io
EOF

runner="local"
external_id=""
run_options=""
parameters="{}"
java_arguments=""

if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$2" == "--help" ] || [ "$2" == "-h" ]
then
    echo "${help}"
    exit 0
fi

if [ "${SPARK_HOME}" == '' ] || [ ! -d "${SPARK_HOME}" ]
then
    (>&2 echo "SPARK_HOME is not set")
    exit 1
fi

cmd=$1
app=$2

if [ "${app}" == 'list' ] || [ "${app}" == 'kill' ]
then
    app="$2 $3 $4"
fi

shift
shift
while [[ $# > 1 ]]
do
    key="$1"

  case ${key} in
    --namespace)
      namespace="$2"
      shift
      ;;

    --config)
      config_file="$2"
      shift
      ;;

    --router-config)
      router_config="$2"
      ;;

    --jar)
      jar_file="$2"
      shift
      ;;
    
    --runner)
      runner="$2"
      shift
      ;;

    --docker-host)
      docker_host="$2"
      shift
      ;;

    --docker-port)
      docker_port="$2"
      shift
      ;;

    --path)
       job_path="$2"
       shift
       ;;

    --classname)
      classname="$2"
      shift
      ;;

    --external-id)
      external_id="$2"
      shift
      ;;

    --parameters)
      parameters="$2"
      shift
      ;;

    --run-options)
      run_options="$2"
      shift
      ;;

    --route)
      route="$2"
      shift
      ;;

    --java-args)
      java_arguments="$2"
      shift
      ;;

  esac

shift
done

# cd $MIST_HOME

if [ "${jar_file}" == '' ]
then
    MAX_VERSION=0
    MAX_VERSION_FILE=""
    if [ -f ${MIST_HOME}/mist.jar ]; then
      jar_file=${MIST_HOME}/mist.jar
    else
      for jar in `find ${MIST_HOME}/target/scala-* -path "${MIST_HOME}/target/scala-*/mist-assembly-*"`
      do
          a=$(echo ${jar} | sed 's|.*/mist-assembly-\([0-9]\{1,\}\).\([0-9]\{1,\}\).\([0-9]\{1,\}\).*|\1\2\3|' | sed 's|0\{1,\}||')
          if [[ ${a} -gt ${MAX_VERSION} ]]
          then
              MAX_VERSION=${a}
              MAX_VERSION_FILE=${jar}
          fi
      done
      jar_file=${MAX_VERSION_FILE}
   fi
fi

if [ "${cmd}" == 'start' ]
then

    if [ "${config_file}" == '' ]
    then
        config_file="${MIST_HOME}/configs/default.conf"
    fi

    if [ "${router_config}" == '' ]
    then
      router_config="${MIST_HOME}/configs/router.conf"
    fi

    if [ "${config_file}" == '' ]
    then
        (>&2 echo "config file is not set")
        echo "${help}"
        exit 1
    fi

    if [ "${jar_file}" == '' ]
    then
        (>&2 echo "mist jar file is not set")
        echo "${help}"
        exit 1
    fi

    if [ "${app}" == 'worker' ]
    then
        if [ "${namespace}" == '' ]
        then
            (>&2 echo "You must specify --namespace to run Mist worker")
            exit 3
        fi
        if [ "${runner}" == 'local' ]
        then
            export PYTHONPATH="$SPARK_HOME/python:`readlink -f ${SPARK_HOME}/python/lib/py4j*`:$PYTHONPATH"
            echo $PYTHONPATH ${SPARK_HOME}/bin/spark-submit --class io.hydrosphere.mist.worker.Worker --driver-java-options "-Dconfig.file=${config_file} ${java_arguments}" ${run_options} "$jar_file" ${namespace}
            ${SPARK_HOME}/bin/spark-submit --class io.hydrosphere.mist.worker.Worker --driver-java-options "-Dconfig.file=${config_file} -Dakka.roles.1=worker-${namespace} ${java_arguments}" ${run_options} "$jar_file" ${namespace}
        elif [ "${runner}" == 'docker' ]
        then
            if [ "${docker_host}" == 'localhost' ] || [ "${docker_host}" == '127.0.0.1' ]
            then
                export socket="--unix-socket /var/run/docker.sock"
            fi
            parentContainer=`curl -X GET $socket -H "Content-Type: application/json" http://${docker_host}:${docker_port}/containers/$HOSTNAME/json` 
            name=`echo $parentContainer | jq -r '.Name'`
            image=`echo $parentContainer | jq -r '.Config.Image'`
            links="[\"$name:/master\"]"
            labels=`echo $parentContainer | jq -r '.Config.Labels'`
            config=`base64 -w 0 configs/docker.conf`
            request="{
                \"Image\":\"$image\",
                \"Cmd\": [
                    \"worker\",
                    \"$namespace\",
                    \"$config\",
                    \"${run_options}\"
                ],
                \"Labels\": $labels,
                \"HostConfig\": {
                    \"Links\": $links
                }
            }"
            containerId=`curl -X POST $socket -H "Content-Type: application/json" http://${docker_host}:${docker_port}/containers/create -d "$request" | jq -r '.Id'`
            curl -X POST $socket -H "Content-Type: application/json" http://${docker_host}:${docker_port}/containers/${containerId}/start
        else
            (>&2 echo "mist.workers.run is wrong")
            exit 3   
        fi 
        exit 0
    fi

    if [ "${app}" == 'master' ]
    then
        java -cp "$jar_file" -Dconfig.file=${config_file} ${java_arguments} io.hydrosphere.mist.master.Master ${router_config}
    fi

    # TODO accept params onl for declared route in config
    if [ "${app}" == 'job' ] || [ "${app}" == 'train' ] || [ "${app}" == 'serve' ]
    then
        if [ "${job_path}" == '' ] || [ "${classname}" == '' ] || [ "${namespace}" == '' ]
        then
            if [ "${route}" == '' ]
            then
                (>&2 echo "Path, class name, namespace or route are required for running jobs")
                echo "${help}"
                exit 3
            fi
        fi
        if [ "$route" == '' ]
        then
            java -cp "$jar_file" -Dconfig.file=${config_file} io.hydrosphere.mist.JobEntryPoint "${app}" "${job_path}" "${classname}" "${namespace}" "${external_id}" "${parameters}"
        else
            java -cp "$jar_file" -Dconfig.file=${config_file} io.hydrosphere.mist.JobEntryPoint "${app}" "${route}" "${parameters}" "${external_id}"
        fi
    fi

elif [ "${cmd}" == 'stop' ]
then
    ps -aef | grep "java.*Master" | awk '{print $2}' | xargs kill
elif [ "${cmd}" == 'cli' ]
then
    java -cp "$jar_file" io.hydrosphere.mist.master.interfaces.cli.EntryPoint "${app}"
else
    echo "${help}"
fi
