mist {

  work-directory = "."
  work-directory = ${?MIST_HOME}

  cluster {
    host = "0.0.0.0"
    port = 2551
  }

  http {
    host = "0.0.0.0"
    port = 2004
    ui = ${mist.work-directory}"/ui"
    ui = ${?MIST_UI_DIR}
    ws-keepalive-tick = 1 minute // it must be less than akka.http.server.idle-timeout
  }

  mqtt {
    on = false
    host = "localhost"
    port = 1883
    publish-topic = ""
    subscribe-topic = ""
  }

  kafka {
    on = false
    host = "localhost"
    port = 9092
    publish-topic = ""
    subscribe-topic = ""
  }

  log-service {
    host = "localhost"
    port = 2005
    dump_directory = ${mist.work-directory}"/logs"
  }

  db {
    filepath = ${mist.work-directory}"/recovery.db"
  }

  workers {
    runner = "local"
    runner-init-timeout = 120 seconds
    docker-host = ""
    docker-port = 0
    cmd = ""
    cmdStop = ""
  }

  context-defaults {
    downtime = Inf
    streaming-duration = 1 seconds
    max-parallel-jobs = 20
    precreated = false
    worker-mode = "shared" # shared | exclusive
    spark-conf {
      #spark.default.parallelism = 128
      #spark.driver.memory = "512m"
      #spark.executor.memory = "256m"
      #spark.scheduler.mode = "FAIR"
    }

    run-options = ""
  }

  context {}

  contexts-store {
    path = ${mist.work-directory}"/data/contexts"
  }
  functions-store {
    path = ${mist.work-directory}"/data/functions"
  }
  jobs-resolver {
    save-path = "/tmp"
  }
  artifact-repository {
    save-path = ${mist.work-directory}"/data/artifacts"
  }
  security {
    enabled = false
    keytab = ""
    principal = ""
    interval = 1 hour
  }

  job-extractor {
    init-timeout = 20s
    cache-entry-ttl = 3600s
    spark-conf {
      spark.driver.memory = "512m"
      spark.executor.memory = "256m"
    }
  }

}

writers-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 1
}

akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  jvm-exit-on-fatal-error = false
  loglevel = "INFO"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    warn-about-java-serializer-usage = false
  }

  remote {
    netty.tcp {
      hostname = ${mist.cluster.host}
      port = ${mist.cluster.port}
      maximum-frame-size = 5242880b
    }
    transport-failure-detector {
      heartbeat-interval = 30s
      acceptable-heartbeat-pause = 5s
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://mist@"${mist.cluster.host}":"${mist.cluster.port}]
    auto-down-unreachable-after = 10s
    log-info = off
    roles = ["master"]
  }

  http.server {
    idle-timeout = 10 minutes
    request-timeout = 2 minutes
  }
}
